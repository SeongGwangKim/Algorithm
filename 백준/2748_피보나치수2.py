'''
문제
피보나치 수는 0과 1로 시작한다. 0번째 피보나치 수는 0이고, 1번째 피보나치 수는 1이다. 그 다음 2번째 부터는 바로 앞 두 피보나치 수의 합이 된다.

이를 식으로 써보면 Fn = Fn-1 + Fn-2 (n ≥ 2)가 된다.

n=17일때 까지 피보나치 수를 써보면 다음과 같다.

0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597

n이 주어졌을 때, n번째 피보나치 수를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 n이 주어진다. n은 90보다 작거나 같은 자연수이다.

출력
첫째 줄에 n번째 피보나치 수를 출력한다.
'''
# 동적할당법을 활용한 풀이
# 문제 조건에 맞는 숫자만큼 캐시 생성
cache = [-1] * 91
# 초깃값 설정
cache[0] = 0
cache[1] = 1


# 함수로 피보나치 수열 구현
def f(n):
    # 캐시가 -1이면 그 자리에 f(n-1) + f(n-2)의 값을 넣는다
    if cache[n] == -1:
        cache[n] = f(n-1) + f(n-2)
    # 해당 n의 캐시값을 리턴한다.
    return cache[n]


# 받은 입력값을 f(n)함수를 통과시켜 리턴받은 값을 출력한다.
print(f(int(input())))